* {
  margin: 0;
  padding: 0;
  font-family: sans-serif;
  box-sizing: border-box;
}
body {
  width: 100%;
  height: 90vh;
  background-color: peachpuff;
  overflow: hidden;
}
.container {
  width: 60%;
  text-align: center;
  height: 95%;
  margin: 2.5% auto;
  background: rgb(239, 233, 232);
  border-radius: 5px;
  position: relative;

  box-shadow: 10px 0 60px brown;
}
.h3-headers {
  color: #777;
  /* background-color: blue;*/
  margin-bottom: 30px;
  padding: 20px 73px;
}
h4 {
  color: #777;
  margin-bottom: 5px;
}
.container form {
  width: 95%;
  left: 2.5%;
  right: 2.5%;
  position: absolute;
  top: 50px;
  transition: 0.5s;
}
form .inp1 {
  width: 80%;
  padding: 10px 5px;
  margin: 3px 0;
  border: 0;
  border-bottom: 1px solid #999;
  outline: none;
  background: transparent;
}
.btn-box {
  margin: 30px auto;
}
form button {
  width: 110px;
  background: linear-gradient(to right, rgb(174, 215, 170), rgb(66, 197, 15));
  border: none;
  border-radius: 25px;
  height: 35px;
  cursor: pointer;
}

#personal-info {
  position: relative;
}
.skills-check {
  display: grid;
  width: 33.333%;
  margin: -10px 33.33% 0 33.33%;
}
.card {
  display: none;
}
.card.active {
  display: block;
}

.step-row {
  width: 100%;
  height: 40px;
  margin: 0 auto;
  display: flex;
  align-items: center;
  box-shadow: 0 -1px 5px -1px #000;
  position: relative;
}
.step-col {
  width: 500px;
  text-align: center;
  color: #333;
  position: relative;
}

#progress {
  position: absolute;
  height: 100%;
  width: 800px;
  background: linear-gradient(to right, rgb(158, 208, 154), rgb(66, 197, 15));
}
#progress::after {
  content: "";
  height: 0;
  width: 0;
  border-top: 20px solid transparent;
  border-bottom: 20px solid transparent;
  position: absolute;
  right: -20px;
  top: 0;
  border-left: 20px solid rgb(66, 197, 15);
}

/*const multiStepForm = document.querySelector("[data-multi-step]");
const formSteps = [...multiStepForm.querySelectorAll("[data-step]")];

let currentStep = formSteps.findIndex((step) => {
  return step.classList.contains("active");
});

if (currentStep < 0) {
  currentStep = 0;
  formSteps[currentStep].classList.add("active");
  showCurrentStep();
}

multiStepForm.addEventListener("click", (e) => {
  let incrementor;
  if (e.target.matches("[data-next]")) {
    incrementor = 1;
  } else if (e.target.matches("[data-back]")) {
    incrementor - 1;
  }
  if (incrementor == null) return;

  const inputs = [...formSteps[currentStep].querySelectorAll("input")];
  const allValid = inputs.every((input) => input.reportValidity());

  if (allValid) {
    currentStep += incrementor;
    showCurrentStep();
  }
});

function showCurrentStep() {
  formSteps.forEach((step, index) => {
    step.classList.toggle("active", index === currentStep);
  });
}
*/
